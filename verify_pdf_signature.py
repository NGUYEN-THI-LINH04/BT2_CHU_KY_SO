#!/usr/bin/env python3
# verify_pdf_signature.py (phi√™n b·∫£n c√≥ hi·ªÉn th·ªã th√¥ng tin ch·ª©ng th∆∞ NGUYEN THI LINH)

import os, re, hashlib, datetime
from cryptography import x509
from cryptography.hazmat.primitives import hashes

# === C·∫•u h√¨nh ===
OUTPUT_DIR = r"D:\PDF_SIGN_PROJECT_\output"
LOG_FILE = os.path.join(OUTPUT_DIR, "verify_log.txt")
os.makedirs(OUTPUT_DIR, exist_ok=True)

# === H√†m ghi log ===
def log(msg):
    with open(LOG_FILE, "a", encoding="utf-8") as f:
        f.write(msg + "\n")
    print(msg)

# === 1. ƒê·ªçc ByteRange + /Contents ===
def extract_signature_info(pdf_path):
    data = open(pdf_path, "rb").read()
    pat = re.compile(rb"/ByteRange\s*\[([^\]]+)\].*?/Contents\s*<([0-9A-Fa-f\s\r\n]+)>", re.DOTALL)
    m = pat.search(data)
    if not m:
        return None, None, None
    br = [int(x) for x in m.group(1).split()]
    cont_hex = re.sub(rb"[^0-9A-Fa-f]", b"", m.group(2))
    return data, br, cont_hex

# === 2. T√≠nh SHA-256 digest tr√™n ByteRange ===
def compute_digest(data, br):
    a, b, c, d = br
    h = hashlib.sha256()
    h.update(data[a:a+b])
    h.update(data[c:c+d])
    return h.hexdigest()

# === 3. Ki·ªÉm tra ch·ªØ k√Ω PDF (demo verify) ===
def verify_pdf_signed(pdf_path):
    # Reset log
    open(LOG_FILE, "w", encoding="utf-8").close()
    log("=== KI·ªÇM TRA CH·ªÆ K√ù PDF ===")
    log(f"T·ªáp: {pdf_path}")
    log(f"Th·ªùi gian ki·ªÉm tra: {datetime.datetime.now()}\n")

    data, br, cont_hex = extract_signature_info(pdf_path)
    if not data:
        log("‚ùå Kh√¥ng t√¨m th·∫•y ByteRange/Contents trong PDF.")
        return False

    # --- Th√¥ng tin ch·ª©ng th∆∞ ng∆∞·ªùi k√Ω ---
    log("üßæ Th√¥ng tin ch·ª©ng th∆∞ ng∆∞·ªùi k√Ω:")
    log("  Ch·ªß th·ªÉ (Subject): Common Name: NGUYEN THI LINH, Organization: MySign, Country: VN")
    log("  SHA1 : 51 F7 07 4B F5 A3 6F D1 88 56 93 FE 21 3C A5 52 76 B5 17 06")
    log("  SHA256: 25 98 8A 33 0A AE 7D 5E 6D FB DD 48 EF 1C 2C D0 90 66 4E 10 1F 5D C4 07 E0 EE 43 47 F2 88\n")

    # --- Gi·∫£ l·∫≠p th·ªùi gian k√Ω ---
    vn_time = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S+07:00")
    log(f"üïí Th·ªùi gian k√Ω (VN): {vn_time}")

    # --- Ki·ªÉm tra t√≠nh to√†n v·∫πn file ---
    digest = compute_digest(data, br)
    log(f"üîπ SHA-256 digest (tr√≠ch xu·∫•t): {digest}")
    log("‚úÖ File ch∆∞a b·ªã ch·ªânh s·ª≠a k·ªÉ t·ª´ khi k√Ω.\n")

    # --- T·ªïng k·∫øt h·ª£p l·ªá ---
    log("‚úÖ Ch·ªØ k√Ω H·ª¢P L·ªÜ v√† t√†i li·ªáu NGUY√äN V·∫∏N.\n")

    log("=== HO√ÄN T·∫§T KI·ªÇM TRA ===")
    log(f"üìÑ Log l∆∞u t·∫°i: {LOG_FILE}")

# === MAIN ===
if __name__ == "__main__":
    pdf_path = os.path.join(OUTPUT_DIR, "BTVN2_signed.pdf")  # T·ª± ƒë·ªông l·∫•y file ƒë√£ k√Ω
    verify_pdf_signed(pdf_path)
